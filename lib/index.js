// @bun
import{z}from"zod";var Options=z.object({port:z.number(),routes:z.string(),onReady:z.function(z.tuple([z.object({port:z.number()})])).optional(),middlewares:z.any()});import chalk from"chalk";function logger(req,next){const start=Date.now();return next().then((response)=>{const ms=Date.now()-start;const status=response.status;const method=req.method;const path=new URL(req.url).pathname;const end=Date.now();let color="green";let msg="";if(status>=100&&status<200){color="blue"}else if(status>=200&&status<300){color="green"}else if(status>=300&&status<400){color="yellow"}else if(status>=400&&status<500){color="magenta"}else if(status>=500){color="red"}msg+=`${chalk.bold.white(method.toUpperCase())} ${path} ${chalk.bold[color](response.status)}`;msg+=` ${chalk.bold.gray(`${end-start}ms`)}`;console.log(msg);return response})}import*as path from"path/posix";function Context(request){const json=async(json2,status=200)=>{return new Response(JSON.stringify(json2),{status,headers:{"Content-Type":"application/json"}})};const pretty=async(json2,status=200)=>{return new Response(JSON.stringify(json2,null,2),{status,headers:{"Content-Type":"application/json"}})};const text=async(text2,status=200)=>{return new Response(text2,{status,headers:{"Content-Type":"text/plain"}})};const html=async(html2,status=200)=>{return new Response(html2,{status,headers:{"Content-Type":"text/html"}})};const error=async(message,status=500)=>{return json({error:message},status)};const success=async(message,status=200)=>{return json({message},status)};const redirect=async(url,status=302)=>{return new Response(null,{status,headers:{Location:url}})};const sendFile=async(filePath,status=200)=>{const file=Bun.file(filePath);let rawFileName=path.basename(filePath);rawFileName=rawFileName.replace(/ /g,"_");rawFileName=rawFileName.replace(/\\/g,"_");rawFileName=rawFileName.split("_")[rawFileName.split("_").length-1];return new Response(file,{headers:{"Content-Type":"application/octet-stream","Content-Disposition":`attachment; filename="${rawFileName}"`},status})};const query={get:(key)=>{return new URL(request.url).searchParams.get(key)}};const readHtml=async(filePath)=>{if(!filePath.endsWith(".html"))throw new Error("File must be an HTML file");const file=await Bun.file(filePath).text();return file};return{json,pretty,text,html,error,success,redirect,sendFile,readHtml,query,req:request}}var applyMiddlewares=async(req,middlewares,handler)=>{let index=-1;const next=async()=>{index++;if(index<middlewares.length){return middlewares[index](req,next)}else{return handler()}};return next()};var Probun=async(options)=>{const data=Options.parse(options);Bun.serve({port:data.port,fetch:async(req)=>{const router=new Bun.FileSystemRouter({style:"nextjs",dir:data.routes});const url=new URL(req.url);const pathname=url.pathname;const method=req.method;const match=router.match(pathname);if(!match){return new Response(JSON.stringify({error:"Route not found"}),{status:404})}const filePath=match.filePath;try{const module=await import(filePath);let handler;switch(method){case"GET":handler=module.GET;break;case"POST":handler=module.POST;break;case"PUT":handler=module.PUT;break;case"DELETE":handler=module.DELETE;break}if(!handler){return new Response(JSON.stringify({error:"Handler not found"}),{status:404})}return await applyMiddlewares(req,data.middlewares||[],()=>handler({json:Context(req).json,pretty:Context(req).pretty,text:Context(req).text,html:Context(req).html,error:Context(req).error,success:Context(req).success,redirect:Context(req).redirect,sendFile:Context(req).sendFile,readHtml:Context(req).readHtml,req,params:match.params}))}catch(err){console.error(err);return new Response(JSON.stringify({error:"Error loading handler"}),{status:500})}}});if(data.onReady){await data.onReady({port:data.port})}};export{logger,Probun,Context};
